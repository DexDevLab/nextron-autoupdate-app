
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Launcher` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Launcher
 * 
 */
export type LauncherModel = runtime.Types.Result.DefaultSelection<Prisma.$LauncherPayload>

export type AggregateLauncher = {
  _count: LauncherCountAggregateOutputType | null
  _min: LauncherMinAggregateOutputType | null
  _max: LauncherMaxAggregateOutputType | null
}

export type LauncherMinAggregateOutputType = {
  id: string | null
  dataType: string | null
  dataValue: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LauncherMaxAggregateOutputType = {
  id: string | null
  dataType: string | null
  dataValue: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LauncherCountAggregateOutputType = {
  id: number
  dataType: number
  dataValue: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type LauncherMinAggregateInputType = {
  id?: true
  dataType?: true
  dataValue?: true
  createdAt?: true
  updatedAt?: true
}

export type LauncherMaxAggregateInputType = {
  id?: true
  dataType?: true
  dataValue?: true
  createdAt?: true
  updatedAt?: true
}

export type LauncherCountAggregateInputType = {
  id?: true
  dataType?: true
  dataValue?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type LauncherAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Launcher to aggregate.
   */
  where?: Prisma.LauncherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Launchers to fetch.
   */
  orderBy?: Prisma.LauncherOrderByWithRelationInput | Prisma.LauncherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LauncherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Launchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Launchers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Launchers
  **/
  _count?: true | LauncherCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LauncherMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LauncherMaxAggregateInputType
}

export type GetLauncherAggregateType<T extends LauncherAggregateArgs> = {
      [P in keyof T & keyof AggregateLauncher]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLauncher[P]>
    : Prisma.GetScalarType<T[P], AggregateLauncher[P]>
}




export type LauncherGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LauncherWhereInput
  orderBy?: Prisma.LauncherOrderByWithAggregationInput | Prisma.LauncherOrderByWithAggregationInput[]
  by: Prisma.LauncherScalarFieldEnum[] | Prisma.LauncherScalarFieldEnum
  having?: Prisma.LauncherScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LauncherCountAggregateInputType | true
  _min?: LauncherMinAggregateInputType
  _max?: LauncherMaxAggregateInputType
}

export type LauncherGroupByOutputType = {
  id: string
  dataType: string
  dataValue: string
  createdAt: Date
  updatedAt: Date
  _count: LauncherCountAggregateOutputType | null
  _min: LauncherMinAggregateOutputType | null
  _max: LauncherMaxAggregateOutputType | null
}

type GetLauncherGroupByPayload<T extends LauncherGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LauncherGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LauncherGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LauncherGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LauncherGroupByOutputType[P]>
      }
    >
  > 



export type LauncherWhereInput = {
  AND?: Prisma.LauncherWhereInput | Prisma.LauncherWhereInput[]
  OR?: Prisma.LauncherWhereInput[]
  NOT?: Prisma.LauncherWhereInput | Prisma.LauncherWhereInput[]
  id?: Prisma.StringFilter<"Launcher"> | string
  dataType?: Prisma.StringFilter<"Launcher"> | string
  dataValue?: Prisma.StringFilter<"Launcher"> | string
  createdAt?: Prisma.DateTimeFilter<"Launcher"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Launcher"> | Date | string
}

export type LauncherOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  dataType?: Prisma.SortOrder
  dataValue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.LauncherOrderByRelevanceInput
}

export type LauncherWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dataType?: string
  AND?: Prisma.LauncherWhereInput | Prisma.LauncherWhereInput[]
  OR?: Prisma.LauncherWhereInput[]
  NOT?: Prisma.LauncherWhereInput | Prisma.LauncherWhereInput[]
  dataValue?: Prisma.StringFilter<"Launcher"> | string
  createdAt?: Prisma.DateTimeFilter<"Launcher"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Launcher"> | Date | string
}, "id" | "id" | "dataType">

export type LauncherOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  dataType?: Prisma.SortOrder
  dataValue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.LauncherCountOrderByAggregateInput
  _max?: Prisma.LauncherMaxOrderByAggregateInput
  _min?: Prisma.LauncherMinOrderByAggregateInput
}

export type LauncherScalarWhereWithAggregatesInput = {
  AND?: Prisma.LauncherScalarWhereWithAggregatesInput | Prisma.LauncherScalarWhereWithAggregatesInput[]
  OR?: Prisma.LauncherScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LauncherScalarWhereWithAggregatesInput | Prisma.LauncherScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Launcher"> | string
  dataType?: Prisma.StringWithAggregatesFilter<"Launcher"> | string
  dataValue?: Prisma.StringWithAggregatesFilter<"Launcher"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Launcher"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Launcher"> | Date | string
}

export type LauncherCreateInput = {
  id?: string
  dataType: string
  dataValue: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LauncherUncheckedCreateInput = {
  id?: string
  dataType: string
  dataValue: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LauncherUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dataType?: Prisma.StringFieldUpdateOperationsInput | string
  dataValue?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LauncherUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dataType?: Prisma.StringFieldUpdateOperationsInput | string
  dataValue?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LauncherCreateManyInput = {
  id?: string
  dataType: string
  dataValue: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LauncherUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dataType?: Prisma.StringFieldUpdateOperationsInput | string
  dataValue?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LauncherUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dataType?: Prisma.StringFieldUpdateOperationsInput | string
  dataValue?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LauncherOrderByRelevanceInput = {
  fields: Prisma.LauncherOrderByRelevanceFieldEnum | Prisma.LauncherOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type LauncherCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dataType?: Prisma.SortOrder
  dataValue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LauncherMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dataType?: Prisma.SortOrder
  dataValue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LauncherMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dataType?: Prisma.SortOrder
  dataValue?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type LauncherSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dataType?: boolean
  dataValue?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["launcher"]>



export type LauncherSelectScalar = {
  id?: boolean
  dataType?: boolean
  dataValue?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type LauncherOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "dataType" | "dataValue" | "createdAt" | "updatedAt", ExtArgs["result"]["launcher"]>

export type $LauncherPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Launcher"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    dataType: string
    dataValue: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["launcher"]>
  composites: {}
}

export type LauncherGetPayload<S extends boolean | null | undefined | LauncherDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LauncherPayload, S>

export type LauncherCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LauncherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LauncherCountAggregateInputType | true
  }

export interface LauncherDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Launcher'], meta: { name: 'Launcher' } }
  /**
   * Find zero or one Launcher that matches the filter.
   * @param {LauncherFindUniqueArgs} args - Arguments to find a Launcher
   * @example
   * // Get one Launcher
   * const launcher = await prisma.launcher.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LauncherFindUniqueArgs>(args: Prisma.SelectSubset<T, LauncherFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Launcher that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LauncherFindUniqueOrThrowArgs} args - Arguments to find a Launcher
   * @example
   * // Get one Launcher
   * const launcher = await prisma.launcher.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LauncherFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LauncherFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Launcher that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LauncherFindFirstArgs} args - Arguments to find a Launcher
   * @example
   * // Get one Launcher
   * const launcher = await prisma.launcher.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LauncherFindFirstArgs>(args?: Prisma.SelectSubset<T, LauncherFindFirstArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Launcher that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LauncherFindFirstOrThrowArgs} args - Arguments to find a Launcher
   * @example
   * // Get one Launcher
   * const launcher = await prisma.launcher.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LauncherFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LauncherFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Launchers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LauncherFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Launchers
   * const launchers = await prisma.launcher.findMany()
   * 
   * // Get first 10 Launchers
   * const launchers = await prisma.launcher.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const launcherWithIdOnly = await prisma.launcher.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LauncherFindManyArgs>(args?: Prisma.SelectSubset<T, LauncherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Launcher.
   * @param {LauncherCreateArgs} args - Arguments to create a Launcher.
   * @example
   * // Create one Launcher
   * const Launcher = await prisma.launcher.create({
   *   data: {
   *     // ... data to create a Launcher
   *   }
   * })
   * 
   */
  create<T extends LauncherCreateArgs>(args: Prisma.SelectSubset<T, LauncherCreateArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Launchers.
   * @param {LauncherCreateManyArgs} args - Arguments to create many Launchers.
   * @example
   * // Create many Launchers
   * const launcher = await prisma.launcher.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LauncherCreateManyArgs>(args?: Prisma.SelectSubset<T, LauncherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Launcher.
   * @param {LauncherDeleteArgs} args - Arguments to delete one Launcher.
   * @example
   * // Delete one Launcher
   * const Launcher = await prisma.launcher.delete({
   *   where: {
   *     // ... filter to delete one Launcher
   *   }
   * })
   * 
   */
  delete<T extends LauncherDeleteArgs>(args: Prisma.SelectSubset<T, LauncherDeleteArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Launcher.
   * @param {LauncherUpdateArgs} args - Arguments to update one Launcher.
   * @example
   * // Update one Launcher
   * const launcher = await prisma.launcher.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LauncherUpdateArgs>(args: Prisma.SelectSubset<T, LauncherUpdateArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Launchers.
   * @param {LauncherDeleteManyArgs} args - Arguments to filter Launchers to delete.
   * @example
   * // Delete a few Launchers
   * const { count } = await prisma.launcher.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LauncherDeleteManyArgs>(args?: Prisma.SelectSubset<T, LauncherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Launchers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LauncherUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Launchers
   * const launcher = await prisma.launcher.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LauncherUpdateManyArgs>(args: Prisma.SelectSubset<T, LauncherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Launcher.
   * @param {LauncherUpsertArgs} args - Arguments to update or create a Launcher.
   * @example
   * // Update or create a Launcher
   * const launcher = await prisma.launcher.upsert({
   *   create: {
   *     // ... data to create a Launcher
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Launcher we want to update
   *   }
   * })
   */
  upsert<T extends LauncherUpsertArgs>(args: Prisma.SelectSubset<T, LauncherUpsertArgs<ExtArgs>>): Prisma.Prisma__LauncherClient<runtime.Types.Result.GetResult<Prisma.$LauncherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Launchers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LauncherCountArgs} args - Arguments to filter Launchers to count.
   * @example
   * // Count the number of Launchers
   * const count = await prisma.launcher.count({
   *   where: {
   *     // ... the filter for the Launchers we want to count
   *   }
   * })
  **/
  count<T extends LauncherCountArgs>(
    args?: Prisma.Subset<T, LauncherCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LauncherCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Launcher.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LauncherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LauncherAggregateArgs>(args: Prisma.Subset<T, LauncherAggregateArgs>): Prisma.PrismaPromise<GetLauncherAggregateType<T>>

  /**
   * Group by Launcher.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LauncherGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LauncherGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LauncherGroupByArgs['orderBy'] }
      : { orderBy?: LauncherGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LauncherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLauncherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Launcher model
 */
readonly fields: LauncherFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Launcher.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LauncherClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Launcher model
 */
export interface LauncherFieldRefs {
  readonly id: Prisma.FieldRef<"Launcher", 'String'>
  readonly dataType: Prisma.FieldRef<"Launcher", 'String'>
  readonly dataValue: Prisma.FieldRef<"Launcher", 'String'>
  readonly createdAt: Prisma.FieldRef<"Launcher", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Launcher", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Launcher findUnique
 */
export type LauncherFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * Filter, which Launcher to fetch.
   */
  where: Prisma.LauncherWhereUniqueInput
}

/**
 * Launcher findUniqueOrThrow
 */
export type LauncherFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * Filter, which Launcher to fetch.
   */
  where: Prisma.LauncherWhereUniqueInput
}

/**
 * Launcher findFirst
 */
export type LauncherFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * Filter, which Launcher to fetch.
   */
  where?: Prisma.LauncherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Launchers to fetch.
   */
  orderBy?: Prisma.LauncherOrderByWithRelationInput | Prisma.LauncherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Launchers.
   */
  cursor?: Prisma.LauncherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Launchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Launchers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Launchers.
   */
  distinct?: Prisma.LauncherScalarFieldEnum | Prisma.LauncherScalarFieldEnum[]
}

/**
 * Launcher findFirstOrThrow
 */
export type LauncherFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * Filter, which Launcher to fetch.
   */
  where?: Prisma.LauncherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Launchers to fetch.
   */
  orderBy?: Prisma.LauncherOrderByWithRelationInput | Prisma.LauncherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Launchers.
   */
  cursor?: Prisma.LauncherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Launchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Launchers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Launchers.
   */
  distinct?: Prisma.LauncherScalarFieldEnum | Prisma.LauncherScalarFieldEnum[]
}

/**
 * Launcher findMany
 */
export type LauncherFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * Filter, which Launchers to fetch.
   */
  where?: Prisma.LauncherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Launchers to fetch.
   */
  orderBy?: Prisma.LauncherOrderByWithRelationInput | Prisma.LauncherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Launchers.
   */
  cursor?: Prisma.LauncherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Launchers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Launchers.
   */
  skip?: number
  distinct?: Prisma.LauncherScalarFieldEnum | Prisma.LauncherScalarFieldEnum[]
}

/**
 * Launcher create
 */
export type LauncherCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * The data needed to create a Launcher.
   */
  data: Prisma.XOR<Prisma.LauncherCreateInput, Prisma.LauncherUncheckedCreateInput>
}

/**
 * Launcher createMany
 */
export type LauncherCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Launchers.
   */
  data: Prisma.LauncherCreateManyInput | Prisma.LauncherCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Launcher update
 */
export type LauncherUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * The data needed to update a Launcher.
   */
  data: Prisma.XOR<Prisma.LauncherUpdateInput, Prisma.LauncherUncheckedUpdateInput>
  /**
   * Choose, which Launcher to update.
   */
  where: Prisma.LauncherWhereUniqueInput
}

/**
 * Launcher updateMany
 */
export type LauncherUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Launchers.
   */
  data: Prisma.XOR<Prisma.LauncherUpdateManyMutationInput, Prisma.LauncherUncheckedUpdateManyInput>
  /**
   * Filter which Launchers to update
   */
  where?: Prisma.LauncherWhereInput
  /**
   * Limit how many Launchers to update.
   */
  limit?: number
}

/**
 * Launcher upsert
 */
export type LauncherUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * The filter to search for the Launcher to update in case it exists.
   */
  where: Prisma.LauncherWhereUniqueInput
  /**
   * In case the Launcher found by the `where` argument doesn't exist, create a new Launcher with this data.
   */
  create: Prisma.XOR<Prisma.LauncherCreateInput, Prisma.LauncherUncheckedCreateInput>
  /**
   * In case the Launcher was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LauncherUpdateInput, Prisma.LauncherUncheckedUpdateInput>
}

/**
 * Launcher delete
 */
export type LauncherDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
  /**
   * Filter which Launcher to delete.
   */
  where: Prisma.LauncherWhereUniqueInput
}

/**
 * Launcher deleteMany
 */
export type LauncherDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Launchers to delete
   */
  where?: Prisma.LauncherWhereInput
  /**
   * Limit how many Launchers to delete.
   */
  limit?: number
}

/**
 * Launcher without action
 */
export type LauncherDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Launcher
   */
  select?: Prisma.LauncherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Launcher
   */
  omit?: Prisma.LauncherOmit<ExtArgs> | null
}
