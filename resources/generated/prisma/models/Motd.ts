
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Motd` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Motd
 * 
 */
export type MotdModel = runtime.Types.Result.DefaultSelection<Prisma.$MotdPayload>

export type AggregateMotd = {
  _count: MotdCountAggregateOutputType | null
  _min: MotdMinAggregateOutputType | null
  _max: MotdMaxAggregateOutputType | null
}

export type MotdMinAggregateOutputType = {
  id: string | null
  motd: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MotdMaxAggregateOutputType = {
  id: string | null
  motd: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MotdCountAggregateOutputType = {
  id: number
  motd: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MotdMinAggregateInputType = {
  id?: true
  motd?: true
  createdAt?: true
  updatedAt?: true
}

export type MotdMaxAggregateInputType = {
  id?: true
  motd?: true
  createdAt?: true
  updatedAt?: true
}

export type MotdCountAggregateInputType = {
  id?: true
  motd?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MotdAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Motd to aggregate.
   */
  where?: Prisma.MotdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Motds to fetch.
   */
  orderBy?: Prisma.MotdOrderByWithRelationInput | Prisma.MotdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MotdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Motds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Motds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Motds
  **/
  _count?: true | MotdCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MotdMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MotdMaxAggregateInputType
}

export type GetMotdAggregateType<T extends MotdAggregateArgs> = {
      [P in keyof T & keyof AggregateMotd]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMotd[P]>
    : Prisma.GetScalarType<T[P], AggregateMotd[P]>
}




export type MotdGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MotdWhereInput
  orderBy?: Prisma.MotdOrderByWithAggregationInput | Prisma.MotdOrderByWithAggregationInput[]
  by: Prisma.MotdScalarFieldEnum[] | Prisma.MotdScalarFieldEnum
  having?: Prisma.MotdScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MotdCountAggregateInputType | true
  _min?: MotdMinAggregateInputType
  _max?: MotdMaxAggregateInputType
}

export type MotdGroupByOutputType = {
  id: string
  motd: string
  createdAt: Date
  updatedAt: Date
  _count: MotdCountAggregateOutputType | null
  _min: MotdMinAggregateOutputType | null
  _max: MotdMaxAggregateOutputType | null
}

type GetMotdGroupByPayload<T extends MotdGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MotdGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MotdGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MotdGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MotdGroupByOutputType[P]>
      }
    >
  > 



export type MotdWhereInput = {
  AND?: Prisma.MotdWhereInput | Prisma.MotdWhereInput[]
  OR?: Prisma.MotdWhereInput[]
  NOT?: Prisma.MotdWhereInput | Prisma.MotdWhereInput[]
  id?: Prisma.StringFilter<"Motd"> | string
  motd?: Prisma.StringFilter<"Motd"> | string
  createdAt?: Prisma.DateTimeFilter<"Motd"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Motd"> | Date | string
}

export type MotdOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  motd?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.MotdOrderByRelevanceInput
}

export type MotdWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MotdWhereInput | Prisma.MotdWhereInput[]
  OR?: Prisma.MotdWhereInput[]
  NOT?: Prisma.MotdWhereInput | Prisma.MotdWhereInput[]
  motd?: Prisma.StringFilter<"Motd"> | string
  createdAt?: Prisma.DateTimeFilter<"Motd"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Motd"> | Date | string
}, "id" | "id">

export type MotdOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  motd?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MotdCountOrderByAggregateInput
  _max?: Prisma.MotdMaxOrderByAggregateInput
  _min?: Prisma.MotdMinOrderByAggregateInput
}

export type MotdScalarWhereWithAggregatesInput = {
  AND?: Prisma.MotdScalarWhereWithAggregatesInput | Prisma.MotdScalarWhereWithAggregatesInput[]
  OR?: Prisma.MotdScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MotdScalarWhereWithAggregatesInput | Prisma.MotdScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Motd"> | string
  motd?: Prisma.StringWithAggregatesFilter<"Motd"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Motd"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Motd"> | Date | string
}

export type MotdCreateInput = {
  id?: string
  motd: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MotdUncheckedCreateInput = {
  id?: string
  motd: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MotdUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  motd?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MotdUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  motd?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MotdCreateManyInput = {
  id?: string
  motd: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MotdUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  motd?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MotdUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  motd?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MotdOrderByRelevanceInput = {
  fields: Prisma.MotdOrderByRelevanceFieldEnum | Prisma.MotdOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type MotdCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  motd?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MotdMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  motd?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MotdMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  motd?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type MotdSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  motd?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["motd"]>



export type MotdSelectScalar = {
  id?: boolean
  motd?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MotdOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "motd" | "createdAt" | "updatedAt", ExtArgs["result"]["motd"]>

export type $MotdPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Motd"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    motd: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["motd"]>
  composites: {}
}

export type MotdGetPayload<S extends boolean | null | undefined | MotdDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MotdPayload, S>

export type MotdCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MotdFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MotdCountAggregateInputType | true
  }

export interface MotdDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Motd'], meta: { name: 'Motd' } }
  /**
   * Find zero or one Motd that matches the filter.
   * @param {MotdFindUniqueArgs} args - Arguments to find a Motd
   * @example
   * // Get one Motd
   * const motd = await prisma.motd.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MotdFindUniqueArgs>(args: Prisma.SelectSubset<T, MotdFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Motd that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MotdFindUniqueOrThrowArgs} args - Arguments to find a Motd
   * @example
   * // Get one Motd
   * const motd = await prisma.motd.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MotdFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MotdFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Motd that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MotdFindFirstArgs} args - Arguments to find a Motd
   * @example
   * // Get one Motd
   * const motd = await prisma.motd.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MotdFindFirstArgs>(args?: Prisma.SelectSubset<T, MotdFindFirstArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Motd that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MotdFindFirstOrThrowArgs} args - Arguments to find a Motd
   * @example
   * // Get one Motd
   * const motd = await prisma.motd.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MotdFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MotdFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Motds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MotdFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Motds
   * const motds = await prisma.motd.findMany()
   * 
   * // Get first 10 Motds
   * const motds = await prisma.motd.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const motdWithIdOnly = await prisma.motd.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MotdFindManyArgs>(args?: Prisma.SelectSubset<T, MotdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Motd.
   * @param {MotdCreateArgs} args - Arguments to create a Motd.
   * @example
   * // Create one Motd
   * const Motd = await prisma.motd.create({
   *   data: {
   *     // ... data to create a Motd
   *   }
   * })
   * 
   */
  create<T extends MotdCreateArgs>(args: Prisma.SelectSubset<T, MotdCreateArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Motds.
   * @param {MotdCreateManyArgs} args - Arguments to create many Motds.
   * @example
   * // Create many Motds
   * const motd = await prisma.motd.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MotdCreateManyArgs>(args?: Prisma.SelectSubset<T, MotdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Motd.
   * @param {MotdDeleteArgs} args - Arguments to delete one Motd.
   * @example
   * // Delete one Motd
   * const Motd = await prisma.motd.delete({
   *   where: {
   *     // ... filter to delete one Motd
   *   }
   * })
   * 
   */
  delete<T extends MotdDeleteArgs>(args: Prisma.SelectSubset<T, MotdDeleteArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Motd.
   * @param {MotdUpdateArgs} args - Arguments to update one Motd.
   * @example
   * // Update one Motd
   * const motd = await prisma.motd.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MotdUpdateArgs>(args: Prisma.SelectSubset<T, MotdUpdateArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Motds.
   * @param {MotdDeleteManyArgs} args - Arguments to filter Motds to delete.
   * @example
   * // Delete a few Motds
   * const { count } = await prisma.motd.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MotdDeleteManyArgs>(args?: Prisma.SelectSubset<T, MotdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Motds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MotdUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Motds
   * const motd = await prisma.motd.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MotdUpdateManyArgs>(args: Prisma.SelectSubset<T, MotdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Motd.
   * @param {MotdUpsertArgs} args - Arguments to update or create a Motd.
   * @example
   * // Update or create a Motd
   * const motd = await prisma.motd.upsert({
   *   create: {
   *     // ... data to create a Motd
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Motd we want to update
   *   }
   * })
   */
  upsert<T extends MotdUpsertArgs>(args: Prisma.SelectSubset<T, MotdUpsertArgs<ExtArgs>>): Prisma.Prisma__MotdClient<runtime.Types.Result.GetResult<Prisma.$MotdPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Motds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MotdCountArgs} args - Arguments to filter Motds to count.
   * @example
   * // Count the number of Motds
   * const count = await prisma.motd.count({
   *   where: {
   *     // ... the filter for the Motds we want to count
   *   }
   * })
  **/
  count<T extends MotdCountArgs>(
    args?: Prisma.Subset<T, MotdCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MotdCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Motd.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MotdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MotdAggregateArgs>(args: Prisma.Subset<T, MotdAggregateArgs>): Prisma.PrismaPromise<GetMotdAggregateType<T>>

  /**
   * Group by Motd.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MotdGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MotdGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MotdGroupByArgs['orderBy'] }
      : { orderBy?: MotdGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MotdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMotdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Motd model
 */
readonly fields: MotdFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Motd.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MotdClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Motd model
 */
export interface MotdFieldRefs {
  readonly id: Prisma.FieldRef<"Motd", 'String'>
  readonly motd: Prisma.FieldRef<"Motd", 'String'>
  readonly createdAt: Prisma.FieldRef<"Motd", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Motd", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Motd findUnique
 */
export type MotdFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * Filter, which Motd to fetch.
   */
  where: Prisma.MotdWhereUniqueInput
}

/**
 * Motd findUniqueOrThrow
 */
export type MotdFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * Filter, which Motd to fetch.
   */
  where: Prisma.MotdWhereUniqueInput
}

/**
 * Motd findFirst
 */
export type MotdFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * Filter, which Motd to fetch.
   */
  where?: Prisma.MotdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Motds to fetch.
   */
  orderBy?: Prisma.MotdOrderByWithRelationInput | Prisma.MotdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Motds.
   */
  cursor?: Prisma.MotdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Motds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Motds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Motds.
   */
  distinct?: Prisma.MotdScalarFieldEnum | Prisma.MotdScalarFieldEnum[]
}

/**
 * Motd findFirstOrThrow
 */
export type MotdFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * Filter, which Motd to fetch.
   */
  where?: Prisma.MotdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Motds to fetch.
   */
  orderBy?: Prisma.MotdOrderByWithRelationInput | Prisma.MotdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Motds.
   */
  cursor?: Prisma.MotdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Motds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Motds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Motds.
   */
  distinct?: Prisma.MotdScalarFieldEnum | Prisma.MotdScalarFieldEnum[]
}

/**
 * Motd findMany
 */
export type MotdFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * Filter, which Motds to fetch.
   */
  where?: Prisma.MotdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Motds to fetch.
   */
  orderBy?: Prisma.MotdOrderByWithRelationInput | Prisma.MotdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Motds.
   */
  cursor?: Prisma.MotdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Motds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Motds.
   */
  skip?: number
  distinct?: Prisma.MotdScalarFieldEnum | Prisma.MotdScalarFieldEnum[]
}

/**
 * Motd create
 */
export type MotdCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * The data needed to create a Motd.
   */
  data: Prisma.XOR<Prisma.MotdCreateInput, Prisma.MotdUncheckedCreateInput>
}

/**
 * Motd createMany
 */
export type MotdCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Motds.
   */
  data: Prisma.MotdCreateManyInput | Prisma.MotdCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Motd update
 */
export type MotdUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * The data needed to update a Motd.
   */
  data: Prisma.XOR<Prisma.MotdUpdateInput, Prisma.MotdUncheckedUpdateInput>
  /**
   * Choose, which Motd to update.
   */
  where: Prisma.MotdWhereUniqueInput
}

/**
 * Motd updateMany
 */
export type MotdUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Motds.
   */
  data: Prisma.XOR<Prisma.MotdUpdateManyMutationInput, Prisma.MotdUncheckedUpdateManyInput>
  /**
   * Filter which Motds to update
   */
  where?: Prisma.MotdWhereInput
  /**
   * Limit how many Motds to update.
   */
  limit?: number
}

/**
 * Motd upsert
 */
export type MotdUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * The filter to search for the Motd to update in case it exists.
   */
  where: Prisma.MotdWhereUniqueInput
  /**
   * In case the Motd found by the `where` argument doesn't exist, create a new Motd with this data.
   */
  create: Prisma.XOR<Prisma.MotdCreateInput, Prisma.MotdUncheckedCreateInput>
  /**
   * In case the Motd was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MotdUpdateInput, Prisma.MotdUncheckedUpdateInput>
}

/**
 * Motd delete
 */
export type MotdDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
  /**
   * Filter which Motd to delete.
   */
  where: Prisma.MotdWhereUniqueInput
}

/**
 * Motd deleteMany
 */
export type MotdDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Motds to delete
   */
  where?: Prisma.MotdWhereInput
  /**
   * Limit how many Motds to delete.
   */
  limit?: number
}

/**
 * Motd without action
 */
export type MotdDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Motd
   */
  select?: Prisma.MotdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Motd
   */
  omit?: Prisma.MotdOmit<ExtArgs> | null
}
