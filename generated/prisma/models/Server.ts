
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Server` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Server
 * 
 */
export type ServerModel = runtime.Types.Result.DefaultSelection<Prisma.$ServerPayload>

export type AggregateServer = {
  _count: ServerCountAggregateOutputType | null
  _avg: ServerAvgAggregateOutputType | null
  _sum: ServerSumAggregateOutputType | null
  _min: ServerMinAggregateOutputType | null
  _max: ServerMaxAggregateOutputType | null
}

export type ServerAvgAggregateOutputType = {
  serverId: number | null
  difficulty: number | null
}

export type ServerSumAggregateOutputType = {
  serverId: number | null
  difficulty: number | null
}

export type ServerMinAggregateOutputType = {
  id: string | null
  serverId: number | null
  name: string | null
  desc: string | null
  mcVersion: string | null
  difficulty: number | null
  assets: string | null
  core: string | null
  modpack: string | null
  available: boolean | null
  modded: boolean | null
  featured: string | null
  periodic: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServerMaxAggregateOutputType = {
  id: string | null
  serverId: number | null
  name: string | null
  desc: string | null
  mcVersion: string | null
  difficulty: number | null
  assets: string | null
  core: string | null
  modpack: string | null
  available: boolean | null
  modded: boolean | null
  featured: string | null
  periodic: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServerCountAggregateOutputType = {
  id: number
  serverId: number
  name: number
  desc: number
  mcVersion: number
  difficulty: number
  assets: number
  core: number
  modpack: number
  available: number
  modded: number
  featured: number
  periodic: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ServerAvgAggregateInputType = {
  serverId?: true
  difficulty?: true
}

export type ServerSumAggregateInputType = {
  serverId?: true
  difficulty?: true
}

export type ServerMinAggregateInputType = {
  id?: true
  serverId?: true
  name?: true
  desc?: true
  mcVersion?: true
  difficulty?: true
  assets?: true
  core?: true
  modpack?: true
  available?: true
  modded?: true
  featured?: true
  periodic?: true
  createdAt?: true
  updatedAt?: true
}

export type ServerMaxAggregateInputType = {
  id?: true
  serverId?: true
  name?: true
  desc?: true
  mcVersion?: true
  difficulty?: true
  assets?: true
  core?: true
  modpack?: true
  available?: true
  modded?: true
  featured?: true
  periodic?: true
  createdAt?: true
  updatedAt?: true
}

export type ServerCountAggregateInputType = {
  id?: true
  serverId?: true
  name?: true
  desc?: true
  mcVersion?: true
  difficulty?: true
  assets?: true
  core?: true
  modpack?: true
  available?: true
  modded?: true
  featured?: true
  periodic?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ServerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Server to aggregate.
   */
  where?: Prisma.ServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servers to fetch.
   */
  orderBy?: Prisma.ServerOrderByWithRelationInput | Prisma.ServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Servers
  **/
  _count?: true | ServerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ServerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ServerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServerMaxAggregateInputType
}

export type GetServerAggregateType<T extends ServerAggregateArgs> = {
      [P in keyof T & keyof AggregateServer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServer[P]>
    : Prisma.GetScalarType<T[P], AggregateServer[P]>
}




export type ServerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServerWhereInput
  orderBy?: Prisma.ServerOrderByWithAggregationInput | Prisma.ServerOrderByWithAggregationInput[]
  by: Prisma.ServerScalarFieldEnum[] | Prisma.ServerScalarFieldEnum
  having?: Prisma.ServerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServerCountAggregateInputType | true
  _avg?: ServerAvgAggregateInputType
  _sum?: ServerSumAggregateInputType
  _min?: ServerMinAggregateInputType
  _max?: ServerMaxAggregateInputType
}

export type ServerGroupByOutputType = {
  id: string
  serverId: number
  name: string
  desc: string
  mcVersion: string
  difficulty: number
  assets: string
  core: string
  modpack: string
  available: boolean
  modded: boolean
  featured: string
  periodic: boolean
  createdAt: Date
  updatedAt: Date
  _count: ServerCountAggregateOutputType | null
  _avg: ServerAvgAggregateOutputType | null
  _sum: ServerSumAggregateOutputType | null
  _min: ServerMinAggregateOutputType | null
  _max: ServerMaxAggregateOutputType | null
}

type GetServerGroupByPayload<T extends ServerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServerGroupByOutputType[P]>
      }
    >
  >



export type ServerWhereInput = {
  AND?: Prisma.ServerWhereInput | Prisma.ServerWhereInput[]
  OR?: Prisma.ServerWhereInput[]
  NOT?: Prisma.ServerWhereInput | Prisma.ServerWhereInput[]
  id?: Prisma.StringFilter<"Server"> | string
  serverId?: Prisma.IntFilter<"Server"> | number
  name?: Prisma.StringFilter<"Server"> | string
  desc?: Prisma.StringFilter<"Server"> | string
  mcVersion?: Prisma.StringFilter<"Server"> | string
  difficulty?: Prisma.IntFilter<"Server"> | number
  assets?: Prisma.StringFilter<"Server"> | string
  core?: Prisma.StringFilter<"Server"> | string
  modpack?: Prisma.StringFilter<"Server"> | string
  available?: Prisma.BoolFilter<"Server"> | boolean
  modded?: Prisma.BoolFilter<"Server"> | boolean
  featured?: Prisma.StringFilter<"Server"> | string
  periodic?: Prisma.BoolFilter<"Server"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Server"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Server"> | Date | string
  tags?: Prisma.ServerTagListRelationFilter
}

export type ServerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  mcVersion?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  core?: Prisma.SortOrder
  modpack?: Prisma.SortOrder
  available?: Prisma.SortOrder
  modded?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  periodic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  tags?: Prisma.ServerTagOrderByRelationAggregateInput
  _relevance?: Prisma.ServerOrderByRelevanceInput
}

export type ServerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  serverId?: number
  AND?: Prisma.ServerWhereInput | Prisma.ServerWhereInput[]
  OR?: Prisma.ServerWhereInput[]
  NOT?: Prisma.ServerWhereInput | Prisma.ServerWhereInput[]
  name?: Prisma.StringFilter<"Server"> | string
  desc?: Prisma.StringFilter<"Server"> | string
  mcVersion?: Prisma.StringFilter<"Server"> | string
  difficulty?: Prisma.IntFilter<"Server"> | number
  assets?: Prisma.StringFilter<"Server"> | string
  core?: Prisma.StringFilter<"Server"> | string
  modpack?: Prisma.StringFilter<"Server"> | string
  available?: Prisma.BoolFilter<"Server"> | boolean
  modded?: Prisma.BoolFilter<"Server"> | boolean
  featured?: Prisma.StringFilter<"Server"> | string
  periodic?: Prisma.BoolFilter<"Server"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Server"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Server"> | Date | string
  tags?: Prisma.ServerTagListRelationFilter
}, "id" | "id" | "serverId">

export type ServerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  mcVersion?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  core?: Prisma.SortOrder
  modpack?: Prisma.SortOrder
  available?: Prisma.SortOrder
  modded?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  periodic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ServerCountOrderByAggregateInput
  _avg?: Prisma.ServerAvgOrderByAggregateInput
  _max?: Prisma.ServerMaxOrderByAggregateInput
  _min?: Prisma.ServerMinOrderByAggregateInput
  _sum?: Prisma.ServerSumOrderByAggregateInput
}

export type ServerScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServerScalarWhereWithAggregatesInput | Prisma.ServerScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServerScalarWhereWithAggregatesInput | Prisma.ServerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Server"> | string
  serverId?: Prisma.IntWithAggregatesFilter<"Server"> | number
  name?: Prisma.StringWithAggregatesFilter<"Server"> | string
  desc?: Prisma.StringWithAggregatesFilter<"Server"> | string
  mcVersion?: Prisma.StringWithAggregatesFilter<"Server"> | string
  difficulty?: Prisma.IntWithAggregatesFilter<"Server"> | number
  assets?: Prisma.StringWithAggregatesFilter<"Server"> | string
  core?: Prisma.StringWithAggregatesFilter<"Server"> | string
  modpack?: Prisma.StringWithAggregatesFilter<"Server"> | string
  available?: Prisma.BoolWithAggregatesFilter<"Server"> | boolean
  modded?: Prisma.BoolWithAggregatesFilter<"Server"> | boolean
  featured?: Prisma.StringWithAggregatesFilter<"Server"> | string
  periodic?: Prisma.BoolWithAggregatesFilter<"Server"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Server"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Server"> | Date | string
}

export type ServerCreateInput = {
  id?: string
  serverId: number
  name: string
  desc?: string
  mcVersion?: string
  difficulty?: number
  assets?: string
  core?: string
  modpack?: string
  available?: boolean
  modded?: boolean
  featured?: string
  periodic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  tags?: Prisma.ServerTagCreateNestedManyWithoutServersInput
}

export type ServerUncheckedCreateInput = {
  id?: string
  serverId: number
  name: string
  desc?: string
  mcVersion?: string
  difficulty?: number
  assets?: string
  core?: string
  modpack?: string
  available?: boolean
  modded?: boolean
  featured?: string
  periodic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  tags?: Prisma.ServerTagUncheckedCreateNestedManyWithoutServersInput
}

export type ServerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serverId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  mcVersion?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  assets?: Prisma.StringFieldUpdateOperationsInput | string
  core?: Prisma.StringFieldUpdateOperationsInput | string
  modpack?: Prisma.StringFieldUpdateOperationsInput | string
  available?: Prisma.BoolFieldUpdateOperationsInput | boolean
  modded?: Prisma.BoolFieldUpdateOperationsInput | boolean
  featured?: Prisma.StringFieldUpdateOperationsInput | string
  periodic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tags?: Prisma.ServerTagUpdateManyWithoutServersNestedInput
}

export type ServerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serverId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  mcVersion?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  assets?: Prisma.StringFieldUpdateOperationsInput | string
  core?: Prisma.StringFieldUpdateOperationsInput | string
  modpack?: Prisma.StringFieldUpdateOperationsInput | string
  available?: Prisma.BoolFieldUpdateOperationsInput | boolean
  modded?: Prisma.BoolFieldUpdateOperationsInput | boolean
  featured?: Prisma.StringFieldUpdateOperationsInput | string
  periodic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tags?: Prisma.ServerTagUncheckedUpdateManyWithoutServersNestedInput
}

export type ServerCreateManyInput = {
  id?: string
  serverId: number
  name: string
  desc?: string
  mcVersion?: string
  difficulty?: number
  assets?: string
  core?: string
  modpack?: string
  available?: boolean
  modded?: boolean
  featured?: string
  periodic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serverId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  mcVersion?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  assets?: Prisma.StringFieldUpdateOperationsInput | string
  core?: Prisma.StringFieldUpdateOperationsInput | string
  modpack?: Prisma.StringFieldUpdateOperationsInput | string
  available?: Prisma.BoolFieldUpdateOperationsInput | boolean
  modded?: Prisma.BoolFieldUpdateOperationsInput | boolean
  featured?: Prisma.StringFieldUpdateOperationsInput | string
  periodic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serverId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  mcVersion?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  assets?: Prisma.StringFieldUpdateOperationsInput | string
  core?: Prisma.StringFieldUpdateOperationsInput | string
  modpack?: Prisma.StringFieldUpdateOperationsInput | string
  available?: Prisma.BoolFieldUpdateOperationsInput | boolean
  modded?: Prisma.BoolFieldUpdateOperationsInput | boolean
  featured?: Prisma.StringFieldUpdateOperationsInput | string
  periodic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerOrderByRelevanceInput = {
  fields: Prisma.ServerOrderByRelevanceFieldEnum | Prisma.ServerOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ServerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  mcVersion?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  core?: Prisma.SortOrder
  modpack?: Prisma.SortOrder
  available?: Prisma.SortOrder
  modded?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  periodic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServerAvgOrderByAggregateInput = {
  serverId?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
}

export type ServerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  mcVersion?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  core?: Prisma.SortOrder
  modpack?: Prisma.SortOrder
  available?: Prisma.SortOrder
  modded?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  periodic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  mcVersion?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
  assets?: Prisma.SortOrder
  core?: Prisma.SortOrder
  modpack?: Prisma.SortOrder
  available?: Prisma.SortOrder
  modded?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  periodic?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServerSumOrderByAggregateInput = {
  serverId?: Prisma.SortOrder
  difficulty?: Prisma.SortOrder
}

export type ServerListRelationFilter = {
  every?: Prisma.ServerWhereInput
  some?: Prisma.ServerWhereInput
  none?: Prisma.ServerWhereInput
}

export type ServerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type ServerCreateNestedManyWithoutTagsInput = {
  create?: Prisma.XOR<Prisma.ServerCreateWithoutTagsInput, Prisma.ServerUncheckedCreateWithoutTagsInput> | Prisma.ServerCreateWithoutTagsInput[] | Prisma.ServerUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.ServerCreateOrConnectWithoutTagsInput | Prisma.ServerCreateOrConnectWithoutTagsInput[]
  connect?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
}

export type ServerUncheckedCreateNestedManyWithoutTagsInput = {
  create?: Prisma.XOR<Prisma.ServerCreateWithoutTagsInput, Prisma.ServerUncheckedCreateWithoutTagsInput> | Prisma.ServerCreateWithoutTagsInput[] | Prisma.ServerUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.ServerCreateOrConnectWithoutTagsInput | Prisma.ServerCreateOrConnectWithoutTagsInput[]
  connect?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
}

export type ServerUpdateManyWithoutTagsNestedInput = {
  create?: Prisma.XOR<Prisma.ServerCreateWithoutTagsInput, Prisma.ServerUncheckedCreateWithoutTagsInput> | Prisma.ServerCreateWithoutTagsInput[] | Prisma.ServerUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.ServerCreateOrConnectWithoutTagsInput | Prisma.ServerCreateOrConnectWithoutTagsInput[]
  upsert?: Prisma.ServerUpsertWithWhereUniqueWithoutTagsInput | Prisma.ServerUpsertWithWhereUniqueWithoutTagsInput[]
  set?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  disconnect?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  delete?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  connect?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  update?: Prisma.ServerUpdateWithWhereUniqueWithoutTagsInput | Prisma.ServerUpdateWithWhereUniqueWithoutTagsInput[]
  updateMany?: Prisma.ServerUpdateManyWithWhereWithoutTagsInput | Prisma.ServerUpdateManyWithWhereWithoutTagsInput[]
  deleteMany?: Prisma.ServerScalarWhereInput | Prisma.ServerScalarWhereInput[]
}

export type ServerUncheckedUpdateManyWithoutTagsNestedInput = {
  create?: Prisma.XOR<Prisma.ServerCreateWithoutTagsInput, Prisma.ServerUncheckedCreateWithoutTagsInput> | Prisma.ServerCreateWithoutTagsInput[] | Prisma.ServerUncheckedCreateWithoutTagsInput[]
  connectOrCreate?: Prisma.ServerCreateOrConnectWithoutTagsInput | Prisma.ServerCreateOrConnectWithoutTagsInput[]
  upsert?: Prisma.ServerUpsertWithWhereUniqueWithoutTagsInput | Prisma.ServerUpsertWithWhereUniqueWithoutTagsInput[]
  set?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  disconnect?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  delete?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  connect?: Prisma.ServerWhereUniqueInput | Prisma.ServerWhereUniqueInput[]
  update?: Prisma.ServerUpdateWithWhereUniqueWithoutTagsInput | Prisma.ServerUpdateWithWhereUniqueWithoutTagsInput[]
  updateMany?: Prisma.ServerUpdateManyWithWhereWithoutTagsInput | Prisma.ServerUpdateManyWithWhereWithoutTagsInput[]
  deleteMany?: Prisma.ServerScalarWhereInput | Prisma.ServerScalarWhereInput[]
}

export type ServerCreateWithoutTagsInput = {
  id?: string
  serverId: number
  name: string
  desc?: string
  mcVersion?: string
  difficulty?: number
  assets?: string
  core?: string
  modpack?: string
  available?: boolean
  modded?: boolean
  featured?: string
  periodic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServerUncheckedCreateWithoutTagsInput = {
  id?: string
  serverId: number
  name: string
  desc?: string
  mcVersion?: string
  difficulty?: number
  assets?: string
  core?: string
  modpack?: string
  available?: boolean
  modded?: boolean
  featured?: string
  periodic?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServerCreateOrConnectWithoutTagsInput = {
  where: Prisma.ServerWhereUniqueInput
  create: Prisma.XOR<Prisma.ServerCreateWithoutTagsInput, Prisma.ServerUncheckedCreateWithoutTagsInput>
}

export type ServerUpsertWithWhereUniqueWithoutTagsInput = {
  where: Prisma.ServerWhereUniqueInput
  update: Prisma.XOR<Prisma.ServerUpdateWithoutTagsInput, Prisma.ServerUncheckedUpdateWithoutTagsInput>
  create: Prisma.XOR<Prisma.ServerCreateWithoutTagsInput, Prisma.ServerUncheckedCreateWithoutTagsInput>
}

export type ServerUpdateWithWhereUniqueWithoutTagsInput = {
  where: Prisma.ServerWhereUniqueInput
  data: Prisma.XOR<Prisma.ServerUpdateWithoutTagsInput, Prisma.ServerUncheckedUpdateWithoutTagsInput>
}

export type ServerUpdateManyWithWhereWithoutTagsInput = {
  where: Prisma.ServerScalarWhereInput
  data: Prisma.XOR<Prisma.ServerUpdateManyMutationInput, Prisma.ServerUncheckedUpdateManyWithoutTagsInput>
}

export type ServerScalarWhereInput = {
  AND?: Prisma.ServerScalarWhereInput | Prisma.ServerScalarWhereInput[]
  OR?: Prisma.ServerScalarWhereInput[]
  NOT?: Prisma.ServerScalarWhereInput | Prisma.ServerScalarWhereInput[]
  id?: Prisma.StringFilter<"Server"> | string
  serverId?: Prisma.IntFilter<"Server"> | number
  name?: Prisma.StringFilter<"Server"> | string
  desc?: Prisma.StringFilter<"Server"> | string
  mcVersion?: Prisma.StringFilter<"Server"> | string
  difficulty?: Prisma.IntFilter<"Server"> | number
  assets?: Prisma.StringFilter<"Server"> | string
  core?: Prisma.StringFilter<"Server"> | string
  modpack?: Prisma.StringFilter<"Server"> | string
  available?: Prisma.BoolFilter<"Server"> | boolean
  modded?: Prisma.BoolFilter<"Server"> | boolean
  featured?: Prisma.StringFilter<"Server"> | string
  periodic?: Prisma.BoolFilter<"Server"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Server"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Server"> | Date | string
}

export type ServerUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serverId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  mcVersion?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  assets?: Prisma.StringFieldUpdateOperationsInput | string
  core?: Prisma.StringFieldUpdateOperationsInput | string
  modpack?: Prisma.StringFieldUpdateOperationsInput | string
  available?: Prisma.BoolFieldUpdateOperationsInput | boolean
  modded?: Prisma.BoolFieldUpdateOperationsInput | boolean
  featured?: Prisma.StringFieldUpdateOperationsInput | string
  periodic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerUncheckedUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serverId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  mcVersion?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  assets?: Prisma.StringFieldUpdateOperationsInput | string
  core?: Prisma.StringFieldUpdateOperationsInput | string
  modpack?: Prisma.StringFieldUpdateOperationsInput | string
  available?: Prisma.BoolFieldUpdateOperationsInput | boolean
  modded?: Prisma.BoolFieldUpdateOperationsInput | boolean
  featured?: Prisma.StringFieldUpdateOperationsInput | string
  periodic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerUncheckedUpdateManyWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serverId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  mcVersion?: Prisma.StringFieldUpdateOperationsInput | string
  difficulty?: Prisma.IntFieldUpdateOperationsInput | number
  assets?: Prisma.StringFieldUpdateOperationsInput | string
  core?: Prisma.StringFieldUpdateOperationsInput | string
  modpack?: Prisma.StringFieldUpdateOperationsInput | string
  available?: Prisma.BoolFieldUpdateOperationsInput | boolean
  modded?: Prisma.BoolFieldUpdateOperationsInput | boolean
  featured?: Prisma.StringFieldUpdateOperationsInput | string
  periodic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ServerCountOutputType
 */

export type ServerCountOutputType = {
  tags: number
}

export type ServerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tags?: boolean | ServerCountOutputTypeCountTagsArgs
}

/**
 * ServerCountOutputType without action
 */
export type ServerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerCountOutputType
   */
  select?: Prisma.ServerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ServerCountOutputType without action
 */
export type ServerCountOutputTypeCountTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServerTagWhereInput
}


export type ServerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  serverId?: boolean
  name?: boolean
  desc?: boolean
  mcVersion?: boolean
  difficulty?: boolean
  assets?: boolean
  core?: boolean
  modpack?: boolean
  available?: boolean
  modded?: boolean
  featured?: boolean
  periodic?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  tags?: boolean | Prisma.Server$tagsArgs<ExtArgs>
  _count?: boolean | Prisma.ServerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["server"]>



export type ServerSelectScalar = {
  id?: boolean
  serverId?: boolean
  name?: boolean
  desc?: boolean
  mcVersion?: boolean
  difficulty?: boolean
  assets?: boolean
  core?: boolean
  modpack?: boolean
  available?: boolean
  modded?: boolean
  featured?: boolean
  periodic?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ServerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "serverId" | "name" | "desc" | "mcVersion" | "difficulty" | "assets" | "core" | "modpack" | "available" | "modded" | "featured" | "periodic" | "createdAt" | "updatedAt", ExtArgs["result"]["server"]>
export type ServerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tags?: boolean | Prisma.Server$tagsArgs<ExtArgs>
  _count?: boolean | Prisma.ServerCountOutputTypeDefaultArgs<ExtArgs>
}

export type $ServerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Server"
  objects: {
    tags: Prisma.$ServerTagPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    serverId: number
    name: string
    desc: string
    mcVersion: string
    difficulty: number
    assets: string
    core: string
    modpack: string
    available: boolean
    modded: boolean
    featured: string
    periodic: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["server"]>
  composites: {}
}

export type ServerGetPayload<S extends boolean | null | undefined | ServerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServerPayload, S>

export type ServerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServerCountAggregateInputType | true
  }

export interface ServerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Server'], meta: { name: 'Server' } }
  /**
   * Find zero or one Server that matches the filter.
   * @param {ServerFindUniqueArgs} args - Arguments to find a Server
   * @example
   * // Get one Server
   * const server = await prisma.server.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServerFindUniqueArgs>(args: Prisma.SelectSubset<T, ServerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Server that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServerFindUniqueOrThrowArgs} args - Arguments to find a Server
   * @example
   * // Get one Server
   * const server = await prisma.server.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Server that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerFindFirstArgs} args - Arguments to find a Server
   * @example
   * // Get one Server
   * const server = await prisma.server.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServerFindFirstArgs>(args?: Prisma.SelectSubset<T, ServerFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Server that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerFindFirstOrThrowArgs} args - Arguments to find a Server
   * @example
   * // Get one Server
   * const server = await prisma.server.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Servers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Servers
   * const servers = await prisma.server.findMany()
   * 
   * // Get first 10 Servers
   * const servers = await prisma.server.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const serverWithIdOnly = await prisma.server.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ServerFindManyArgs>(args?: Prisma.SelectSubset<T, ServerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Server.
   * @param {ServerCreateArgs} args - Arguments to create a Server.
   * @example
   * // Create one Server
   * const Server = await prisma.server.create({
   *   data: {
   *     // ... data to create a Server
   *   }
   * })
   * 
   */
  create<T extends ServerCreateArgs>(args: Prisma.SelectSubset<T, ServerCreateArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Servers.
   * @param {ServerCreateManyArgs} args - Arguments to create many Servers.
   * @example
   * // Create many Servers
   * const server = await prisma.server.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServerCreateManyArgs>(args?: Prisma.SelectSubset<T, ServerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Server.
   * @param {ServerDeleteArgs} args - Arguments to delete one Server.
   * @example
   * // Delete one Server
   * const Server = await prisma.server.delete({
   *   where: {
   *     // ... filter to delete one Server
   *   }
   * })
   * 
   */
  delete<T extends ServerDeleteArgs>(args: Prisma.SelectSubset<T, ServerDeleteArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Server.
   * @param {ServerUpdateArgs} args - Arguments to update one Server.
   * @example
   * // Update one Server
   * const server = await prisma.server.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServerUpdateArgs>(args: Prisma.SelectSubset<T, ServerUpdateArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Servers.
   * @param {ServerDeleteManyArgs} args - Arguments to filter Servers to delete.
   * @example
   * // Delete a few Servers
   * const { count } = await prisma.server.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServerDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Servers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Servers
   * const server = await prisma.server.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServerUpdateManyArgs>(args: Prisma.SelectSubset<T, ServerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Server.
   * @param {ServerUpsertArgs} args - Arguments to update or create a Server.
   * @example
   * // Update or create a Server
   * const server = await prisma.server.upsert({
   *   create: {
   *     // ... data to create a Server
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Server we want to update
   *   }
   * })
   */
  upsert<T extends ServerUpsertArgs>(args: Prisma.SelectSubset<T, ServerUpsertArgs<ExtArgs>>): Prisma.Prisma__ServerClient<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Servers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerCountArgs} args - Arguments to filter Servers to count.
   * @example
   * // Count the number of Servers
   * const count = await prisma.server.count({
   *   where: {
   *     // ... the filter for the Servers we want to count
   *   }
   * })
  **/
  count<T extends ServerCountArgs>(
    args?: Prisma.Subset<T, ServerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Server.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServerAggregateArgs>(args: Prisma.Subset<T, ServerAggregateArgs>): Prisma.PrismaPromise<GetServerAggregateType<T>>

  /**
   * Group by Server.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServerGroupByArgs['orderBy'] }
      : { orderBy?: ServerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Server model
 */
readonly fields: ServerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Server.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tags<T extends Prisma.Server$tagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Server$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Server model
 */
export interface ServerFieldRefs {
  readonly id: Prisma.FieldRef<"Server", 'String'>
  readonly serverId: Prisma.FieldRef<"Server", 'Int'>
  readonly name: Prisma.FieldRef<"Server", 'String'>
  readonly desc: Prisma.FieldRef<"Server", 'String'>
  readonly mcVersion: Prisma.FieldRef<"Server", 'String'>
  readonly difficulty: Prisma.FieldRef<"Server", 'Int'>
  readonly assets: Prisma.FieldRef<"Server", 'String'>
  readonly core: Prisma.FieldRef<"Server", 'String'>
  readonly modpack: Prisma.FieldRef<"Server", 'String'>
  readonly available: Prisma.FieldRef<"Server", 'Boolean'>
  readonly modded: Prisma.FieldRef<"Server", 'Boolean'>
  readonly featured: Prisma.FieldRef<"Server", 'String'>
  readonly periodic: Prisma.FieldRef<"Server", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Server", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Server", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Server findUnique
 */
export type ServerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * Filter, which Server to fetch.
   */
  where: Prisma.ServerWhereUniqueInput
}

/**
 * Server findUniqueOrThrow
 */
export type ServerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * Filter, which Server to fetch.
   */
  where: Prisma.ServerWhereUniqueInput
}

/**
 * Server findFirst
 */
export type ServerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * Filter, which Server to fetch.
   */
  where?: Prisma.ServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servers to fetch.
   */
  orderBy?: Prisma.ServerOrderByWithRelationInput | Prisma.ServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Servers.
   */
  cursor?: Prisma.ServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Servers.
   */
  distinct?: Prisma.ServerScalarFieldEnum | Prisma.ServerScalarFieldEnum[]
}

/**
 * Server findFirstOrThrow
 */
export type ServerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * Filter, which Server to fetch.
   */
  where?: Prisma.ServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servers to fetch.
   */
  orderBy?: Prisma.ServerOrderByWithRelationInput | Prisma.ServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Servers.
   */
  cursor?: Prisma.ServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Servers.
   */
  distinct?: Prisma.ServerScalarFieldEnum | Prisma.ServerScalarFieldEnum[]
}

/**
 * Server findMany
 */
export type ServerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * Filter, which Servers to fetch.
   */
  where?: Prisma.ServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Servers to fetch.
   */
  orderBy?: Prisma.ServerOrderByWithRelationInput | Prisma.ServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Servers.
   */
  cursor?: Prisma.ServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Servers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Servers.
   */
  skip?: number
  distinct?: Prisma.ServerScalarFieldEnum | Prisma.ServerScalarFieldEnum[]
}

/**
 * Server create
 */
export type ServerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * The data needed to create a Server.
   */
  data: Prisma.XOR<Prisma.ServerCreateInput, Prisma.ServerUncheckedCreateInput>
}

/**
 * Server createMany
 */
export type ServerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Servers.
   */
  data: Prisma.ServerCreateManyInput | Prisma.ServerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Server update
 */
export type ServerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * The data needed to update a Server.
   */
  data: Prisma.XOR<Prisma.ServerUpdateInput, Prisma.ServerUncheckedUpdateInput>
  /**
   * Choose, which Server to update.
   */
  where: Prisma.ServerWhereUniqueInput
}

/**
 * Server updateMany
 */
export type ServerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Servers.
   */
  data: Prisma.XOR<Prisma.ServerUpdateManyMutationInput, Prisma.ServerUncheckedUpdateManyInput>
  /**
   * Filter which Servers to update
   */
  where?: Prisma.ServerWhereInput
  /**
   * Limit how many Servers to update.
   */
  limit?: number
}

/**
 * Server upsert
 */
export type ServerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * The filter to search for the Server to update in case it exists.
   */
  where: Prisma.ServerWhereUniqueInput
  /**
   * In case the Server found by the `where` argument doesn't exist, create a new Server with this data.
   */
  create: Prisma.XOR<Prisma.ServerCreateInput, Prisma.ServerUncheckedCreateInput>
  /**
   * In case the Server was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServerUpdateInput, Prisma.ServerUncheckedUpdateInput>
}

/**
 * Server delete
 */
export type ServerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  /**
   * Filter which Server to delete.
   */
  where: Prisma.ServerWhereUniqueInput
}

/**
 * Server deleteMany
 */
export type ServerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Servers to delete
   */
  where?: Prisma.ServerWhereInput
  /**
   * Limit how many Servers to delete.
   */
  limit?: number
}

/**
 * Server.tags
 */
export type Server$tagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  where?: Prisma.ServerTagWhereInput
  orderBy?: Prisma.ServerTagOrderByWithRelationInput | Prisma.ServerTagOrderByWithRelationInput[]
  cursor?: Prisma.ServerTagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ServerTagScalarFieldEnum | Prisma.ServerTagScalarFieldEnum[]
}

/**
 * Server without action
 */
export type ServerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
}
