
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ServerTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ServerTag
 * 
 */
export type ServerTagModel = runtime.Types.Result.DefaultSelection<Prisma.$ServerTagPayload>

export type AggregateServerTag = {
  _count: ServerTagCountAggregateOutputType | null
  _avg: ServerTagAvgAggregateOutputType | null
  _sum: ServerTagSumAggregateOutputType | null
  _min: ServerTagMinAggregateOutputType | null
  _max: ServerTagMaxAggregateOutputType | null
}

export type ServerTagAvgAggregateOutputType = {
  tagId: number | null
}

export type ServerTagSumAggregateOutputType = {
  tagId: number | null
}

export type ServerTagMinAggregateOutputType = {
  id: string | null
  tagId: number | null
  name: string | null
  desc: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServerTagMaxAggregateOutputType = {
  id: string | null
  tagId: number | null
  name: string | null
  desc: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServerTagCountAggregateOutputType = {
  id: number
  tagId: number
  name: number
  desc: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ServerTagAvgAggregateInputType = {
  tagId?: true
}

export type ServerTagSumAggregateInputType = {
  tagId?: true
}

export type ServerTagMinAggregateInputType = {
  id?: true
  tagId?: true
  name?: true
  desc?: true
  createdAt?: true
  updatedAt?: true
}

export type ServerTagMaxAggregateInputType = {
  id?: true
  tagId?: true
  name?: true
  desc?: true
  createdAt?: true
  updatedAt?: true
}

export type ServerTagCountAggregateInputType = {
  id?: true
  tagId?: true
  name?: true
  desc?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ServerTagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServerTag to aggregate.
   */
  where?: Prisma.ServerTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerTags to fetch.
   */
  orderBy?: Prisma.ServerTagOrderByWithRelationInput | Prisma.ServerTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServerTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ServerTags
  **/
  _count?: true | ServerTagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ServerTagAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ServerTagSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServerTagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServerTagMaxAggregateInputType
}

export type GetServerTagAggregateType<T extends ServerTagAggregateArgs> = {
      [P in keyof T & keyof AggregateServerTag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServerTag[P]>
    : Prisma.GetScalarType<T[P], AggregateServerTag[P]>
}




export type ServerTagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServerTagWhereInput
  orderBy?: Prisma.ServerTagOrderByWithAggregationInput | Prisma.ServerTagOrderByWithAggregationInput[]
  by: Prisma.ServerTagScalarFieldEnum[] | Prisma.ServerTagScalarFieldEnum
  having?: Prisma.ServerTagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServerTagCountAggregateInputType | true
  _avg?: ServerTagAvgAggregateInputType
  _sum?: ServerTagSumAggregateInputType
  _min?: ServerTagMinAggregateInputType
  _max?: ServerTagMaxAggregateInputType
}

export type ServerTagGroupByOutputType = {
  id: string
  tagId: number
  name: string
  desc: string
  createdAt: Date
  updatedAt: Date
  _count: ServerTagCountAggregateOutputType | null
  _avg: ServerTagAvgAggregateOutputType | null
  _sum: ServerTagSumAggregateOutputType | null
  _min: ServerTagMinAggregateOutputType | null
  _max: ServerTagMaxAggregateOutputType | null
}

type GetServerTagGroupByPayload<T extends ServerTagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServerTagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServerTagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServerTagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServerTagGroupByOutputType[P]>
      }
    >
  >



export type ServerTagWhereInput = {
  AND?: Prisma.ServerTagWhereInput | Prisma.ServerTagWhereInput[]
  OR?: Prisma.ServerTagWhereInput[]
  NOT?: Prisma.ServerTagWhereInput | Prisma.ServerTagWhereInput[]
  id?: Prisma.StringFilter<"ServerTag"> | string
  tagId?: Prisma.IntFilter<"ServerTag"> | number
  name?: Prisma.StringFilter<"ServerTag"> | string
  desc?: Prisma.StringFilter<"ServerTag"> | string
  createdAt?: Prisma.DateTimeFilter<"ServerTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServerTag"> | Date | string
  servers?: Prisma.ServerListRelationFilter
}

export type ServerTagOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  servers?: Prisma.ServerOrderByRelationAggregateInput
  _relevance?: Prisma.ServerTagOrderByRelevanceInput
}

export type ServerTagWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  tagId?: number
  name?: string
  AND?: Prisma.ServerTagWhereInput | Prisma.ServerTagWhereInput[]
  OR?: Prisma.ServerTagWhereInput[]
  NOT?: Prisma.ServerTagWhereInput | Prisma.ServerTagWhereInput[]
  desc?: Prisma.StringFilter<"ServerTag"> | string
  createdAt?: Prisma.DateTimeFilter<"ServerTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServerTag"> | Date | string
  servers?: Prisma.ServerListRelationFilter
}, "id" | "id" | "tagId" | "name">

export type ServerTagOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ServerTagCountOrderByAggregateInput
  _avg?: Prisma.ServerTagAvgOrderByAggregateInput
  _max?: Prisma.ServerTagMaxOrderByAggregateInput
  _min?: Prisma.ServerTagMinOrderByAggregateInput
  _sum?: Prisma.ServerTagSumOrderByAggregateInput
}

export type ServerTagScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServerTagScalarWhereWithAggregatesInput | Prisma.ServerTagScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServerTagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServerTagScalarWhereWithAggregatesInput | Prisma.ServerTagScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ServerTag"> | string
  tagId?: Prisma.IntWithAggregatesFilter<"ServerTag"> | number
  name?: Prisma.StringWithAggregatesFilter<"ServerTag"> | string
  desc?: Prisma.StringWithAggregatesFilter<"ServerTag"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ServerTag"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ServerTag"> | Date | string
}

export type ServerTagCreateInput = {
  id?: string
  tagId: number
  name: string
  desc: string
  createdAt?: Date | string
  updatedAt?: Date | string
  servers?: Prisma.ServerCreateNestedManyWithoutTagsInput
}

export type ServerTagUncheckedCreateInput = {
  id?: string
  tagId: number
  name: string
  desc: string
  createdAt?: Date | string
  updatedAt?: Date | string
  servers?: Prisma.ServerUncheckedCreateNestedManyWithoutTagsInput
}

export type ServerTagUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  servers?: Prisma.ServerUpdateManyWithoutTagsNestedInput
}

export type ServerTagUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  servers?: Prisma.ServerUncheckedUpdateManyWithoutTagsNestedInput
}

export type ServerTagCreateManyInput = {
  id?: string
  tagId: number
  name: string
  desc: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServerTagUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerTagUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerTagListRelationFilter = {
  every?: Prisma.ServerTagWhereInput
  some?: Prisma.ServerTagWhereInput
  none?: Prisma.ServerTagWhereInput
}

export type ServerTagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ServerTagOrderByRelevanceInput = {
  fields: Prisma.ServerTagOrderByRelevanceFieldEnum | Prisma.ServerTagOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ServerTagCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServerTagAvgOrderByAggregateInput = {
  tagId?: Prisma.SortOrder
}

export type ServerTagMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServerTagMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServerTagSumOrderByAggregateInput = {
  tagId?: Prisma.SortOrder
}

export type ServerTagCreateNestedManyWithoutServersInput = {
  create?: Prisma.XOR<Prisma.ServerTagCreateWithoutServersInput, Prisma.ServerTagUncheckedCreateWithoutServersInput> | Prisma.ServerTagCreateWithoutServersInput[] | Prisma.ServerTagUncheckedCreateWithoutServersInput[]
  connectOrCreate?: Prisma.ServerTagCreateOrConnectWithoutServersInput | Prisma.ServerTagCreateOrConnectWithoutServersInput[]
  connect?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
}

export type ServerTagUncheckedCreateNestedManyWithoutServersInput = {
  create?: Prisma.XOR<Prisma.ServerTagCreateWithoutServersInput, Prisma.ServerTagUncheckedCreateWithoutServersInput> | Prisma.ServerTagCreateWithoutServersInput[] | Prisma.ServerTagUncheckedCreateWithoutServersInput[]
  connectOrCreate?: Prisma.ServerTagCreateOrConnectWithoutServersInput | Prisma.ServerTagCreateOrConnectWithoutServersInput[]
  connect?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
}

export type ServerTagUpdateManyWithoutServersNestedInput = {
  create?: Prisma.XOR<Prisma.ServerTagCreateWithoutServersInput, Prisma.ServerTagUncheckedCreateWithoutServersInput> | Prisma.ServerTagCreateWithoutServersInput[] | Prisma.ServerTagUncheckedCreateWithoutServersInput[]
  connectOrCreate?: Prisma.ServerTagCreateOrConnectWithoutServersInput | Prisma.ServerTagCreateOrConnectWithoutServersInput[]
  upsert?: Prisma.ServerTagUpsertWithWhereUniqueWithoutServersInput | Prisma.ServerTagUpsertWithWhereUniqueWithoutServersInput[]
  set?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  disconnect?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  delete?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  connect?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  update?: Prisma.ServerTagUpdateWithWhereUniqueWithoutServersInput | Prisma.ServerTagUpdateWithWhereUniqueWithoutServersInput[]
  updateMany?: Prisma.ServerTagUpdateManyWithWhereWithoutServersInput | Prisma.ServerTagUpdateManyWithWhereWithoutServersInput[]
  deleteMany?: Prisma.ServerTagScalarWhereInput | Prisma.ServerTagScalarWhereInput[]
}

export type ServerTagUncheckedUpdateManyWithoutServersNestedInput = {
  create?: Prisma.XOR<Prisma.ServerTagCreateWithoutServersInput, Prisma.ServerTagUncheckedCreateWithoutServersInput> | Prisma.ServerTagCreateWithoutServersInput[] | Prisma.ServerTagUncheckedCreateWithoutServersInput[]
  connectOrCreate?: Prisma.ServerTagCreateOrConnectWithoutServersInput | Prisma.ServerTagCreateOrConnectWithoutServersInput[]
  upsert?: Prisma.ServerTagUpsertWithWhereUniqueWithoutServersInput | Prisma.ServerTagUpsertWithWhereUniqueWithoutServersInput[]
  set?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  disconnect?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  delete?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  connect?: Prisma.ServerTagWhereUniqueInput | Prisma.ServerTagWhereUniqueInput[]
  update?: Prisma.ServerTagUpdateWithWhereUniqueWithoutServersInput | Prisma.ServerTagUpdateWithWhereUniqueWithoutServersInput[]
  updateMany?: Prisma.ServerTagUpdateManyWithWhereWithoutServersInput | Prisma.ServerTagUpdateManyWithWhereWithoutServersInput[]
  deleteMany?: Prisma.ServerTagScalarWhereInput | Prisma.ServerTagScalarWhereInput[]
}

export type ServerTagCreateWithoutServersInput = {
  id?: string
  tagId: number
  name: string
  desc: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServerTagUncheckedCreateWithoutServersInput = {
  id?: string
  tagId: number
  name: string
  desc: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServerTagCreateOrConnectWithoutServersInput = {
  where: Prisma.ServerTagWhereUniqueInput
  create: Prisma.XOR<Prisma.ServerTagCreateWithoutServersInput, Prisma.ServerTagUncheckedCreateWithoutServersInput>
}

export type ServerTagUpsertWithWhereUniqueWithoutServersInput = {
  where: Prisma.ServerTagWhereUniqueInput
  update: Prisma.XOR<Prisma.ServerTagUpdateWithoutServersInput, Prisma.ServerTagUncheckedUpdateWithoutServersInput>
  create: Prisma.XOR<Prisma.ServerTagCreateWithoutServersInput, Prisma.ServerTagUncheckedCreateWithoutServersInput>
}

export type ServerTagUpdateWithWhereUniqueWithoutServersInput = {
  where: Prisma.ServerTagWhereUniqueInput
  data: Prisma.XOR<Prisma.ServerTagUpdateWithoutServersInput, Prisma.ServerTagUncheckedUpdateWithoutServersInput>
}

export type ServerTagUpdateManyWithWhereWithoutServersInput = {
  where: Prisma.ServerTagScalarWhereInput
  data: Prisma.XOR<Prisma.ServerTagUpdateManyMutationInput, Prisma.ServerTagUncheckedUpdateManyWithoutServersInput>
}

export type ServerTagScalarWhereInput = {
  AND?: Prisma.ServerTagScalarWhereInput | Prisma.ServerTagScalarWhereInput[]
  OR?: Prisma.ServerTagScalarWhereInput[]
  NOT?: Prisma.ServerTagScalarWhereInput | Prisma.ServerTagScalarWhereInput[]
  id?: Prisma.StringFilter<"ServerTag"> | string
  tagId?: Prisma.IntFilter<"ServerTag"> | number
  name?: Prisma.StringFilter<"ServerTag"> | string
  desc?: Prisma.StringFilter<"ServerTag"> | string
  createdAt?: Prisma.DateTimeFilter<"ServerTag"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServerTag"> | Date | string
}

export type ServerTagUpdateWithoutServersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerTagUncheckedUpdateWithoutServersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServerTagUncheckedUpdateManyWithoutServersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ServerTagCountOutputType
 */

export type ServerTagCountOutputType = {
  servers: number
}

export type ServerTagCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  servers?: boolean | ServerTagCountOutputTypeCountServersArgs
}

/**
 * ServerTagCountOutputType without action
 */
export type ServerTagCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTagCountOutputType
   */
  select?: Prisma.ServerTagCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ServerTagCountOutputType without action
 */
export type ServerTagCountOutputTypeCountServersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServerWhereInput
}


export type ServerTagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tagId?: boolean
  name?: boolean
  desc?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  servers?: boolean | Prisma.ServerTag$serversArgs<ExtArgs>
  _count?: boolean | Prisma.ServerTagCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["serverTag"]>



export type ServerTagSelectScalar = {
  id?: boolean
  tagId?: boolean
  name?: boolean
  desc?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ServerTagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tagId" | "name" | "desc" | "createdAt" | "updatedAt", ExtArgs["result"]["serverTag"]>
export type ServerTagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  servers?: boolean | Prisma.ServerTag$serversArgs<ExtArgs>
  _count?: boolean | Prisma.ServerTagCountOutputTypeDefaultArgs<ExtArgs>
}

export type $ServerTagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ServerTag"
  objects: {
    servers: Prisma.$ServerPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    tagId: number
    name: string
    desc: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["serverTag"]>
  composites: {}
}

export type ServerTagGetPayload<S extends boolean | null | undefined | ServerTagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServerTagPayload, S>

export type ServerTagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServerTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServerTagCountAggregateInputType | true
  }

export interface ServerTagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServerTag'], meta: { name: 'ServerTag' } }
  /**
   * Find zero or one ServerTag that matches the filter.
   * @param {ServerTagFindUniqueArgs} args - Arguments to find a ServerTag
   * @example
   * // Get one ServerTag
   * const serverTag = await prisma.serverTag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServerTagFindUniqueArgs>(args: Prisma.SelectSubset<T, ServerTagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ServerTag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServerTagFindUniqueOrThrowArgs} args - Arguments to find a ServerTag
   * @example
   * // Get one ServerTag
   * const serverTag = await prisma.serverTag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServerTagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServerTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServerTag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerTagFindFirstArgs} args - Arguments to find a ServerTag
   * @example
   * // Get one ServerTag
   * const serverTag = await prisma.serverTag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServerTagFindFirstArgs>(args?: Prisma.SelectSubset<T, ServerTagFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServerTag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerTagFindFirstOrThrowArgs} args - Arguments to find a ServerTag
   * @example
   * // Get one ServerTag
   * const serverTag = await prisma.serverTag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServerTagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServerTagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ServerTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerTagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ServerTags
   * const serverTags = await prisma.serverTag.findMany()
   * 
   * // Get first 10 ServerTags
   * const serverTags = await prisma.serverTag.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const serverTagWithIdOnly = await prisma.serverTag.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ServerTagFindManyArgs>(args?: Prisma.SelectSubset<T, ServerTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ServerTag.
   * @param {ServerTagCreateArgs} args - Arguments to create a ServerTag.
   * @example
   * // Create one ServerTag
   * const ServerTag = await prisma.serverTag.create({
   *   data: {
   *     // ... data to create a ServerTag
   *   }
   * })
   * 
   */
  create<T extends ServerTagCreateArgs>(args: Prisma.SelectSubset<T, ServerTagCreateArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ServerTags.
   * @param {ServerTagCreateManyArgs} args - Arguments to create many ServerTags.
   * @example
   * // Create many ServerTags
   * const serverTag = await prisma.serverTag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServerTagCreateManyArgs>(args?: Prisma.SelectSubset<T, ServerTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ServerTag.
   * @param {ServerTagDeleteArgs} args - Arguments to delete one ServerTag.
   * @example
   * // Delete one ServerTag
   * const ServerTag = await prisma.serverTag.delete({
   *   where: {
   *     // ... filter to delete one ServerTag
   *   }
   * })
   * 
   */
  delete<T extends ServerTagDeleteArgs>(args: Prisma.SelectSubset<T, ServerTagDeleteArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ServerTag.
   * @param {ServerTagUpdateArgs} args - Arguments to update one ServerTag.
   * @example
   * // Update one ServerTag
   * const serverTag = await prisma.serverTag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServerTagUpdateArgs>(args: Prisma.SelectSubset<T, ServerTagUpdateArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ServerTags.
   * @param {ServerTagDeleteManyArgs} args - Arguments to filter ServerTags to delete.
   * @example
   * // Delete a few ServerTags
   * const { count } = await prisma.serverTag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServerTagDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServerTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServerTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerTagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ServerTags
   * const serverTag = await prisma.serverTag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServerTagUpdateManyArgs>(args: Prisma.SelectSubset<T, ServerTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ServerTag.
   * @param {ServerTagUpsertArgs} args - Arguments to update or create a ServerTag.
   * @example
   * // Update or create a ServerTag
   * const serverTag = await prisma.serverTag.upsert({
   *   create: {
   *     // ... data to create a ServerTag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ServerTag we want to update
   *   }
   * })
   */
  upsert<T extends ServerTagUpsertArgs>(args: Prisma.SelectSubset<T, ServerTagUpsertArgs<ExtArgs>>): Prisma.Prisma__ServerTagClient<runtime.Types.Result.GetResult<Prisma.$ServerTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ServerTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerTagCountArgs} args - Arguments to filter ServerTags to count.
   * @example
   * // Count the number of ServerTags
   * const count = await prisma.serverTag.count({
   *   where: {
   *     // ... the filter for the ServerTags we want to count
   *   }
   * })
  **/
  count<T extends ServerTagCountArgs>(
    args?: Prisma.Subset<T, ServerTagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServerTagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ServerTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServerTagAggregateArgs>(args: Prisma.Subset<T, ServerTagAggregateArgs>): Prisma.PrismaPromise<GetServerTagAggregateType<T>>

  /**
   * Group by ServerTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerTagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServerTagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServerTagGroupByArgs['orderBy'] }
      : { orderBy?: ServerTagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServerTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServerTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ServerTag model
 */
readonly fields: ServerTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ServerTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServerTagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  servers<T extends Prisma.ServerTag$serversArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServerTag$serversArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ServerTag model
 */
export interface ServerTagFieldRefs {
  readonly id: Prisma.FieldRef<"ServerTag", 'String'>
  readonly tagId: Prisma.FieldRef<"ServerTag", 'Int'>
  readonly name: Prisma.FieldRef<"ServerTag", 'String'>
  readonly desc: Prisma.FieldRef<"ServerTag", 'String'>
  readonly createdAt: Prisma.FieldRef<"ServerTag", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ServerTag", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ServerTag findUnique
 */
export type ServerTagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * Filter, which ServerTag to fetch.
   */
  where: Prisma.ServerTagWhereUniqueInput
}

/**
 * ServerTag findUniqueOrThrow
 */
export type ServerTagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * Filter, which ServerTag to fetch.
   */
  where: Prisma.ServerTagWhereUniqueInput
}

/**
 * ServerTag findFirst
 */
export type ServerTagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * Filter, which ServerTag to fetch.
   */
  where?: Prisma.ServerTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerTags to fetch.
   */
  orderBy?: Prisma.ServerTagOrderByWithRelationInput | Prisma.ServerTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServerTags.
   */
  cursor?: Prisma.ServerTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServerTags.
   */
  distinct?: Prisma.ServerTagScalarFieldEnum | Prisma.ServerTagScalarFieldEnum[]
}

/**
 * ServerTag findFirstOrThrow
 */
export type ServerTagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * Filter, which ServerTag to fetch.
   */
  where?: Prisma.ServerTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerTags to fetch.
   */
  orderBy?: Prisma.ServerTagOrderByWithRelationInput | Prisma.ServerTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServerTags.
   */
  cursor?: Prisma.ServerTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServerTags.
   */
  distinct?: Prisma.ServerTagScalarFieldEnum | Prisma.ServerTagScalarFieldEnum[]
}

/**
 * ServerTag findMany
 */
export type ServerTagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * Filter, which ServerTags to fetch.
   */
  where?: Prisma.ServerTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerTags to fetch.
   */
  orderBy?: Prisma.ServerTagOrderByWithRelationInput | Prisma.ServerTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ServerTags.
   */
  cursor?: Prisma.ServerTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerTags.
   */
  skip?: number
  distinct?: Prisma.ServerTagScalarFieldEnum | Prisma.ServerTagScalarFieldEnum[]
}

/**
 * ServerTag create
 */
export type ServerTagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * The data needed to create a ServerTag.
   */
  data: Prisma.XOR<Prisma.ServerTagCreateInput, Prisma.ServerTagUncheckedCreateInput>
}

/**
 * ServerTag createMany
 */
export type ServerTagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ServerTags.
   */
  data: Prisma.ServerTagCreateManyInput | Prisma.ServerTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ServerTag update
 */
export type ServerTagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * The data needed to update a ServerTag.
   */
  data: Prisma.XOR<Prisma.ServerTagUpdateInput, Prisma.ServerTagUncheckedUpdateInput>
  /**
   * Choose, which ServerTag to update.
   */
  where: Prisma.ServerTagWhereUniqueInput
}

/**
 * ServerTag updateMany
 */
export type ServerTagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ServerTags.
   */
  data: Prisma.XOR<Prisma.ServerTagUpdateManyMutationInput, Prisma.ServerTagUncheckedUpdateManyInput>
  /**
   * Filter which ServerTags to update
   */
  where?: Prisma.ServerTagWhereInput
  /**
   * Limit how many ServerTags to update.
   */
  limit?: number
}

/**
 * ServerTag upsert
 */
export type ServerTagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * The filter to search for the ServerTag to update in case it exists.
   */
  where: Prisma.ServerTagWhereUniqueInput
  /**
   * In case the ServerTag found by the `where` argument doesn't exist, create a new ServerTag with this data.
   */
  create: Prisma.XOR<Prisma.ServerTagCreateInput, Prisma.ServerTagUncheckedCreateInput>
  /**
   * In case the ServerTag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServerTagUpdateInput, Prisma.ServerTagUncheckedUpdateInput>
}

/**
 * ServerTag delete
 */
export type ServerTagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
  /**
   * Filter which ServerTag to delete.
   */
  where: Prisma.ServerTagWhereUniqueInput
}

/**
 * ServerTag deleteMany
 */
export type ServerTagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServerTags to delete
   */
  where?: Prisma.ServerTagWhereInput
  /**
   * Limit how many ServerTags to delete.
   */
  limit?: number
}

/**
 * ServerTag.servers
 */
export type ServerTag$serversArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Server
   */
  select?: Prisma.ServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Server
   */
  omit?: Prisma.ServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerInclude<ExtArgs> | null
  where?: Prisma.ServerWhereInput
  orderBy?: Prisma.ServerOrderByWithRelationInput | Prisma.ServerOrderByWithRelationInput[]
  cursor?: Prisma.ServerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ServerScalarFieldEnum | Prisma.ServerScalarFieldEnum[]
}

/**
 * ServerTag without action
 */
export type ServerTagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerTag
   */
  select?: Prisma.ServerTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerTag
   */
  omit?: Prisma.ServerTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServerTagInclude<ExtArgs> | null
}
